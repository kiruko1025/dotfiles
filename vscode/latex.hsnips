global
function math(context) {
    return  context.scopes.findLastIndex(s => s.startsWith("meta.math")) > context.scopes.findLastIndex(s => s.startsWith("comment") || s.startsWith("meta.text.normal.tex"));
}
function notmath(context) {
    return  context.scopes.findLastIndex(s => s.startsWith("meta.math")) <= context.scopes.findLastIndex(s => s.startsWith("comment") || s.startsWith("meta.text.normal.tex"));
}
endglobal

#General snippets
context notmath(context)
snippet env "global environment" b
\documentclass[a4paper]{article}

\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{textcomp}
\usepackage{tikz}
\usepackage{import}
\usepackage{xifthen}
\usepackage{pdfpages}
\usepackage{transparent}
\usepackage{amsthm}
\usepackage{amsmath}
\usepackage{listings}
\usepackage{graphicx}
\usepackage{tikz}
\usepackage{xcolor}
\usepackage{algorithm}
\usepackage{algpseudocode}
\graphicspath{ {./images/} }
\pdfsuppresswarningpagegroup=1
\title{$1}
\author{$2}
\date{$3}
\begin{document}
\maketitle
$0
\end{document}
endsnippet


context notmath(context)
snippet code "code snippet" b
\begin{lstlisting}[language=$1]
$0
\end{lstlisting}
endsnippet


context notmath(context)
snippet gra "add a graph" b
\begin{figure}[h]
\includegraphics[]{$1}
\centering
\end{figure}
$0
endsnippet


context notmath(context)
snippet codefile "code snippet from file" b
\lstinputlisting[language=$1, firstline =$2, lastline=$3]{$4} $0
endsnippet


context notmath(context)
snippet cat "catpussin color scheme" b
\usepackage[mocha]{catppuccinpalette}
endsnippet


snippet beg "environment" b
\begin{$1}
$0
\end{$1}
endsnippet

snippet desc "Description" b
\begin{description}
	\item[$1] $0
\end{description}
endsnippet


context notmath(context)
snippet bd "environment" iA
\textbf{$1} $0
endsnippet


snippet sti "small title" bi
\vspace*{0.2cm}{\Large\textbf{$1}}\\\\ $0
endsnippet

context notmath(context)
snippet date "Gives you the current date!"
``rv = new Date().toDateString()``!
endsnippet

context notmath(context)
snippet box "Box" A
``rv = '┌' + '─'.repeat(t[0].length + 2) + '┐'``
│ $1 │
``rv = '└' + '─'.repeat(t[0].length + 2) + '┘'``
endsnippet

context notmath(context)
snippet table "Table environment" b
\begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:label}}
	\begin{tabular}{${5:c}}
	$0${5/((?<=.)c|l|r)|./(?1: & )/g}
	\end{tabular}
\end{table}
endsnippet


context notmath(context)
snippet fig "Figure environment" b
\begin{figure}[${1:H}]
	\centering
	\includegraphics[width=0.8\textwidth]{$2}
	\caption{$3}
	\label{fig:$4}
\end{figure}
endsnippet

snippet enum "Enumerate" bA
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet

snippet item "Itemize" bA
\begin{itemize}
	\item $0
\end{itemize}
endsnippet

snippet desc "Description" b
\begin{description}
	\item[$1] $0
\end{description}
endsnippet


#Math modes
snippet mk "Inline math" iA
\$$1\$$0
endsnippet

snippet dm "Display math" bA
\begin{align*}
$0
\end{align*}
endsnippet

snippet plot "Plot" w
\begin{figure}[$1]
	\centering
	\begin{tikzpicture}
		\begin{axis}[
			xmin= ${2:-10}, xmax= ${3:10},
			ymin= ${4:-10}, ymax = ${5:10},
			axis lines = middle,
		]
			\addplot[domain=$2:$3, samples=${6:100}]{$7};
		\end{axis}
	\end{tikzpicture}
	\caption{$8}
	\label{${9:$8}}
\end{figure}
endsnippet


#Operations in math mode
context math(context)
snippet te "text mode" i
\text{$1}$0
endsnippet

context math(context)
snippet sq "square root" Ai
\sqrt{$1}$0
endsnippet

context math(context)
snippet sr "square" Ai
^{2}$0
endsnippet

context math(context)
snippet invs "inverse" Ai
^{-1}$0
endsnippet

context math(context)
snippet rd "exp (superscript)" Ai
^{ $1 }$0
endsnippet

snippet sum "sum" w
\sum_{n=${1:1}}^{${2:\infty}} ${3:a_n z^n}
endsnippet

snippet taylor "taylor" w
\sum_{${1:k}=${2:0}}^{${3:\infty}} ${4:c_$1} (x-a)^$1 $0
endsnippet

context math(context)
snippet `\b([a-zA-Z])(\d)` "sub number" A
``rv = m[1]``_{``rv = m[2]``}
endsnippet

context math(context)
snippet `([a-zA-Z])_(\d\d)` "sub two numbers" Ai
``rv = m[1]``_{``rv = m[2]``}
endsnippet

context math(context)
snippet `\\hat{([a-zA-Z])}(\d)` "hat with sub number" Ai
\hat{``rv = m[1]``}_{``rv = m[2]``}
endsnippet

context math(context)
snippet `\\mathbf{([a-zA-Z])}(\d)` "bold symbol with sub number" Ai
\mathbf{``rv = m[1]``}_{``rv = m[2]``}
endsnippet

context math(context)
snippet `\\vec{([a-zA-Z])}(\d)` "vec with sub number" Ai
\vec{``rv = m[1]``}_{``rv = m[2]``}
endsnippet

context math(context)
snippet `([a-gi-zA-Z])bar` "add bar" Ai
\bar{``rv = m[1]``}
endsnippet

context math(context)
snippet `([a-zA-Z])hat` "add hat" Ai
\hat{``rv = m[1]``}
endsnippet

context math(context)
snippet `([a-zA-Z])ddot` "add ddot" A
\ddot{``rv = m[1]``}
endsnippet

context math(context)
snippet `([a-ce-zA-Z])dot` "add dot" Ai
\dot{``rv = m[1]``}
endsnippet

context math(context)
snippet `([a-zA-Z])vec` "vec" Ai
\vec{``rv = m[1]``}
endsnippet

context math(context)
snippet `([a-zA-Z])und` "add underline" Ai
\underline{``rv = m[1]``}
endsnippet

context math(context)
snippet bar "bar" Ai
\bar{$1}$0
endsnippet

context math(context)
snippet hat "hat" Ai
\hat{$1}$0
endsnippet

context math(context)
snippet Hat "wide hat" Ai
\widehat{$1}$0
endsnippet

context math(context)
snippet `\\dot` "dot" Ai
\dot{$1}$0
endsnippet

context math(context)
snippet ddot "ddot" Ai
\ddot{$1}$0
endsnippet


context math(context)
snippet tilde "tilde" Ai
\tilde{$1}$0
endsnippet

context math(context)
snippet Tilde "wide tilde" Ai
\widetilde{$1}$0
endsnippet

context math(context)
snippet und "und" Ai
\underline{$1}$0
endsnippet


context math(context)
snippet abs "absolute value" Ai
\lvert $1 \rvert $0
endsnippet

context math(context)
snippet set "set" Ai
\set{ $1 }$0
endsnippet

context math(context)
snippet Set "large set" Ai
\Set{ $1 }$0
endsnippet

context math(context)
snippet ee "e" Ai
e^{ $1 }$0
endsnippet

context math(context)
snippet log "log" Ai
\log_{ $1 }$0
endsnippet

context math(context)
snippet ln "natural log" Ai
\ln_{ $1 }$0
endsnippet

#Greek Letters
context math(context)
snippet @a "α" Ai
\alpha 
endsnippet

context math(context)
snippet @b "β" Ai
\beta 
endsnippet

context math(context)
snippet @g "γ" Ai
\gamma 
endsnippet

context math(context)
snippet @G "Γ" Ai
\Gamma 
endsnippet

context math(context)
snippet @d "δ" Ai
\delta 
endsnippet

context math(context)
snippet @D "Δ" Ai
\Delta 
endsnippet

context math(context)
snippet @e "ε" Ai
\epsilon 
endsnippet

context math(context)
snippet @z "ζ" Ai
\zeta 
endsnippet

context math(context)
snippet eta "η" Ai
\eta 
endsnippet

context math(context)
snippet @t "θ" Ai
\theta 
endsnippet

context math(context)
snippet @T "Θ" Ai
\Theta 
endsnippet

context math(context)
snippet @i "ι" Ai
\iota 
endsnippet

context math(context)
snippet @k "κ" Ai
\kappa 
endsnippet

context math(context)
snippet @l "λ" Ai
\lambda 
endsnippet

context math(context)
snippet @L "Λ" Ai
\Lambda 
endsnippet

context math(context)
snippet mu "μ" Ai
\mu 
endsnippet

context math(context)
snippet nu "ν" Ai
\nu 
endsnippet

context math(context)
snippet xi "ξ" Ai
\xi 
endsnippet

context math(context)
snippet pi "π" Ai
\pi 
endsnippet

context math(context)
snippet Pi "Π" Ai
\Pi 
endsnippet

context math(context)
snippet rho "ρ" Ai
\rho 
endsnippet

context math(context)
snippet @s "σ" Ai
\sigma 
endsnippet

context math(context)
snippet @S "Σ" Ai
\Sigma 
endsnippet

context math(context)
snippet tau "τ" Ai
\tau 
endsnippet

context math(context)
snippet @u "υ" Ai
\upsilon 
endsnippet

context math(context)
snippet @U "Υ" Ai
\Upsilon 
endsnippet

context math(context)
snippet phi "φ" Ai
\phi 
endsnippet

context math(context)
snippet chi "χ" Ai
\chi 
endsnippet

context math(context)
snippet psi "ψ" Ai
\psi 
endsnippet

context math(context)
snippet Psi "Ψ" Ai
\Psi 
endsnippet

context math(context)
snippet @o "ω" Ai
\omega 
endsnippet

context math(context)
snippet @O "Ω" Ai
\Omega 
endsnippet

context math(context)
snippet `([A-Z])#` "bb" Ai
``rv = '\\mathbb{' + m[1] + '}'``
endsnippet

#Symbols
context math(context)
snippet ooo "infinity" Ai
\infty
endsnippet

context math(context)
snippet @0 "emptyset" Ai
\emptyset 
endsnippet

context math(context)
snippet lim "limit" Ai
\lim_{$1 \to $2}$0
endsnippet

context math(context)
snippet ... "dots" Ai
\dots
endsnippet

context math(context)
snippet c.. "cdots" Ai
\cdots 
endsnippet

context math(context)
snippet <-> "left rigth arrow" A
\leftrightarrow 
endsnippet

context math(context)
snippet -> "to" A
\to 
endsnippet

context math(context)
snippet and "logical and" A
\cap 
endsnippet

context math(context)
snippet orr "logical or" A
\cup 
endsnippet

context math(context)
snippet wed "wedge symbol" A
\wedge 
endsnippet

context math(context)
snippet vel "descending wedge symbol" A
\vee 
endsnippet

context math(context)
snippet inn "set in" A
\in 
endsnippet

context math(context)
snippet subset "subset" A
\subset 
endsnippet


context math(context)
snippet => "implies" A
\implies 
endsnippet

context math(context)
snippet =< "impliedby" A
\impliedby 
endsnippet

context math(context)
snippet iff "if and only if" A
\iff 
endsnippet

context math(context)
snippet exists "exists" Ai
\exists 
endsnippet

context math(context)
snippet forall "for all" Ai
\forall 
endsnippet

context math(context)
snippet s.t. "such that or subjected to" A
\text{s.t.}
endsnippet

context math(context)
snippet === "equiv" A
\equiv 
endsnippet

context math(context)
snippet Sq "square" Ai
\square
endsnippet

context math(context)
snippet != "not eq" A
\neq 
endsnippet

snippet `<=` "leq" A
``rv = '\\leq'``
endsnippet

snippet `>=` "geq" A
``rv = '\\geq'``
endsnippet

context math(context)
snippet ~~ "similar" A
\sim
endsnippet

context math(context)
snippet ~= "similar" A
\simeq 
endsnippet

context math(context)
snippet prop "propotional to" A
\propto 
endsnippet

context math(context)
snippet div "divergence" Ai
\div 
endsnippet

context math(context)
snippet rot "rotation" Ai
\rot 
endsnippet

context math(context)
snippet grad "gradient" Ai
\grad 
endsnippet

context math(context)
snippet xx "times" A
\times 
endsnippet

context math(context)
snippet cc "cdot" A
\cdot 
endsnippet

context math(context)
snippet para "parallel" A
\parallel 
endsnippet

#Calculus 
context math(context)
snippet par "partial derivative" i
\frac{\partial $1}{\partial $2}$0
endsnippet

context math(context)
snippet pa2 "second partial derivative" Ai
\frac{\partial^2 $1}{\partial $2^2}$0
endsnippet

context math(context)
snippet pa3 "third partial derivative" Ai
\frac{\partial^3 $1}{\partial $2^3}$0
endsnippet

context math(context)
snippet `d([a-zA-Z])d([a-zA-Z])` "regex derivative" i
\frac{d ``rv = m[1]``}{d ``rv = m[2]``}
endsnippet

context math(context)
snippet `d([a-zA-Z])d([a-zA-Z])2` "regex second derivative" Ai
\frac{d^2 ``rv = m[1]``}{d ``rv = m[2]``^2}
endsnippet

context math(context)
snippet ddt "time differential operator" Ai
\frac{d}{dt}
endsnippet

context math(context)
snippet ddx "differential operator" Ai
\frac{d}{dx}
endsnippet

context math(context)
snippet int "integral" A
\int d$1 \, $0
endsnippet

context math(context)
snippet dint "definite integral" A
\int_{$1}^{$2} d$3 \, $0
endsnippet

context math(context)
snippet oint "closed loop integral" A
\oint 
endsnippet

context math(context)
snippet iint "2-fold integral" A
\iint 
endsnippet

context math(context)
snippet iiint "3-fold integral" A
\iiint 
endsnippet

#Linear Algebra
context math(context)
snippet `M([1-9])x([1-9])([ d])` "matrix" A
``rv = '\\left(\\begin{array}{' + 'c'.repeat(m[2]) + '}'``
``count = 1;
msg = '';
diag = (m[3] == 'd');

for (i=0; i < parseInt(m[1],10); i++) {
  diag && (i!=0) ? msg += '0' : msg += '${' + count + ':0}';
  count++;
  for (j=1; j < parseInt(m[2],10); j++) {
    diag && (i!=j) ? msg += ' & 0' : msg += ' & ${' + count + ':0}';
    count++;
  }
  if (i != parseInt(m[1],10)-1) {
    msg += ' \\\\\\ \n';
  }
}
rv = msg;``
\\end{array}\\right)
endsnippet 

context math(context)
snippet `vec([1-9])` "column vector" A
``rv = '\\begin{pmatrix}'``
``count=2;
msg = '${1:0}';
for (i = 1; i < parseInt(m[1],10); i++) {
  msg += ' \\\\\\ \n${' + count + ':0}';
  count++;
}
rv = msg;
``
\\end{pmatrix}
endsnippet





#Brackets
context math(context)
snippet avg "average" Ai
\langle $1 \rangle $0
endsnippet

context math(context)
snippet mod "mod" Ai
| $1 |$0
endsnippet

context math(context)
snippet lr() "large parentheses " Ai
\left( $0 \right)
endsnippet

context math(context)
snippet lr| "large bars" Ai
\left| $0 \right|
endsnippet

context math(context)
snippet lr{} "large braces" Ai
\left\{ $0 \right\}
endsnippet

context math(context)
snippet lr[] "large brackets" Ai
\left[ $0 \right]
endsnippet

context math(context)
snippet lr< "large angle brackets" Ai
\left< $0 \right>
endsnippet

#Fractions
context math(context)
snippet // "Fraction simple" Ai
\frac{$1}{$2}$0
endsnippet

context math(context)
snippet `((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/` "Fraction no ()" Ai
\frac{``rv = m[1]``}{$1}$0
endsnippet

context math(context)
snippet `^.*\)/` "() Fraction" Ai
``
let stripped = m[0].substring(0, m[0].length - 1);
let depth = 0;
let i = stripped.length - 1;
while (i >= 0) {
	if (stripped[i] == ')') depth += 1;
	if (stripped[i] == '(') depth -= 1
	if (depth == 0) break;
    i -= 1
}
rv = `${stripped.substring(0, i)}\\frac{${stripped.substring(i + 1, stripped.length - 1)}}`;
``{$1}$0
endsnippet

